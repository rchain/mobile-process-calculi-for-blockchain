# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, RChain Co-op
# This file is distributed under the same license as the Mobile process
# calculi for programming the blockchain package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: Mobile process calculi for programming the "
"blockchain 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-16 22:11+0800\n"
"PO-Revision-Date: 2018-03-18 16:30+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh\n"
"X-Generator: Poedit 2.0.5\n"

#: ../../enter-the-blockchain.rst:5
msgid "Enter the blockchain"
msgstr "进入区块链"

#: ../../enter-the-blockchain.rst:7
msgid ""
"One simple way to interpret blockchain technology is that it provides a "
"decentralized replication technology. State can be replicated across a "
"network of nodes without a centralized authority managing the "
"replication. The subtle interplay between this replication mechanism and "
"economics-based security sometimes obscures the basic value of the "
"replication, itself. Replication of this nature is already a high impact "
"value proposition. Witness Ethereum’s proposal. The essence of it is to "
"replicate the state of a virtual machine, instead of the state of "
"ledger, on the blockchain. This provides not just a smart contracting "
"system, but a global public compute resource that cannot be taken down."
msgstr ""
"用一句简单的话来解释，区块链是一项去中心化的多备份技术。状态可以备份在多"
"个网络节点，并且不需要任何中心化的机构来管理备份。多备份机制和基于经济学"
"的安全之间微妙的相互作用有时候使多备份本身的基本价值被模糊化。这个机制下"
"的多备份已经成为一个高影响力的价值主张。见证以太坊的提议，它的精髓是在区"
"块链上备份虚拟机的状态，而不是账本的状态。这不仅提供了一个智能合约系统，"
"同时还有全网公开、无法被关闭的计算资源。"

#: ../../enter-the-blockchain.rst:9
msgid ""
"More than Wall St or the City should be sitting up and taking notice. "
"Amazon’s AWS, Google’s Cloud Service, Microsoft’s Azure, all of these "
"businesses become profoundly affected by the Ethereum proposal. The fact "
"that the ledger, or economic aspect of replicated state can now be used "
"as an economic security measure against DoS attacks on the global "
"compute resource serves to strengthen the proposal. It also changes the "
"nature of the ecosystem that uses these services."
msgstr ""
"不仅仅是华尔街引起了注意，亚马逊的AWS，Google的云服务，Microsoft的Azure，"
"所有这些业务深深地被以太坊所影响。事实上，账本（多备份状态的经济学说法）"
"可以被用作一个经济上的安全实体，可以抗衡基于全球计算资源的DoS攻击，加强了"
"协议的健壮性。它也从本质上地改变了使用这些服务的生态系统。"

#: ../../enter-the-blockchain.rst:11
msgid ""
"The entire value proposition of cloud service infrastructure providers "
"vitally depends on microtransactions linked to the use of compute "
"resources. The Ethereum proposal integrates this at lowest level of "
"execution and storage, in a manner that is crucial to the security of "
"the system. It’s simply a better, more elegant design than incumbent "
"cloud solutions. More importantly, it’s realized as a public resource. "
"One of the recent revolutions that shares some characteristics of this "
"emerging situation is the shift in telecommunications as a result of the "
"Internet. The telephony providers knew that the Internet was going to "
"change the way telecommunications was done and had to scramble to adapt "
"and adjust to a landscape where more than half of long distance "
"telecommunications would be conducted using free services like Skype, "
"zoom, and Google Hangouts. Cloud infrastructure service providers, and "
"the whole interconnected network of services running on them will "
"likewise have to shift to a landscape where there is a sophisticated "
"cryptocurrency market integrated with globally available, public compute "
"resources at the lowest level."
msgstr ""
"云服务基础设施提供商的价值主张非常依赖于微交易，这些微交易与计算资源的使"
"用息息相关。以太坊在最底层的执行和存储中集成了微交易，一定程度上对系统的"
"安全性保障提供了至关重要的作用。它比当前的云解决方案更好、更优雅。更重要"
"的是，它被开源地实现了。具有这种新兴形式的一些特点的革命之一，离我们最近"
"的，还是由互联网导致的通信方式的转移。电话业务提供商知道，互联网将改变人"
"们的通讯方式，从而不得不争先恐后地适应这样的场景——超过半数的长距离通讯都"
"将趋于使用像Skype, zoom和Google Hangouts这样的免费服务。云基础服务提供"
"商，以及整个跑在云上的互联网络，都将不得不转变成一个精致的加密货币市场。"
"它在最底层汇聚了全球可用的、公开的计算资源。"

#: ../../enter-the-blockchain.rst:14
msgid "Casper"
msgstr "Casper"

#: ../../enter-the-blockchain.rst:16
msgid ""
"At the 20K foot level this is a profound idea, but at the level of "
"execution for production systems, it highlights several desiderata. "
"First of all, it requires a different replication technology! The very "
"technology that gave birth to the Ethereum proposal is the first thing "
"that has to be re-imagined to make Ethereum’s idea viable at Internet "
"scale for production systems. Proof of work is simply too costly in "
"terms of energy. The arguments for this are numerous, and all of the "
"major stakeholders in Ethereum’s development community have embraced "
"them. Instead, a new pay-to-play algorithm, called Casper, is under "
"development by a loose federation of stakeholders, including Buterin, "
"Zamfir, and Meredith."
msgstr ""
"在2万英尺的高度上看，这是一个深奥的想法，但在生产环境系统执行的角度上看，"
"它突出了几个要求。首先，它需要一个不同的备份技术。为了使得以太坊的想法在"
"互联网规模的生产环境系统上仍然可行，这项促使以太坊协议诞生的技术是我们首"
"先需要重新思考的。工作量证明过于消耗能源。社区对此的争议很大，并且以太坊"
"开发者社区的所有主要利益相关方都在积极参与这些讨论。取而代之地，一个被称"
"为Casper的新的“付费参与”算法，正在由一个小团队负责进行开发，成员包括"
"Buterin, Zamfir和Meredith。"

#: ../../enter-the-blockchain.rst:19
msgid "Bet by block versus bet by proposition"
msgstr "基于区块下注VS基于提案下注"

#: ../../enter-the-blockchain.rst:21
msgid ""
"At the core of the Casper consensus algorithm is a cycle of message "
"exchange amongst validators participating in the replication protocol. "
"This cycle of message exchange ultimately converges to produce the "
"consensus state. The protocol is factored in such a way that the "
"consensus cycle, sometimes called the betting cycle, works independently "
"of the type of state on which the validators are developing a consensus. "
"It could be used to develop consensus on a single boolean value (e.g. "
"the result of a coin flip), or something much more sophisticated, like "
"the state of a virtual machine. This is further articulated into how the "
"state is packaged. Specifically, the very name, blockchain, refers to "
"the fact that state is packaged in blocks that are chained together. "
"Thus, a very natural object of the consensus cycle is a block. Roughly "
"speaking, validators exchange messages to converge on the next block in "
"the chain."
msgstr ""
"Casper共识算法的核心是参与复制协议验证者的一个消息交换周期。在消息交换周"
"期中各个验证者最终能够趋于收敛达成共识。Casper协议设计特点是共识周期，有"
"时被称为博彩周期与验证者正在使用的共识算法的状态无关。它可以用来在单个布"
"尔值上（例如硬币翻转的结果）达成共识，或者像状态机那样复杂地达成共识。在"
"本文中进一步阐明了共识的状态该如何封装。具体而言，区块链这个名词指代的就"
"是一系列状态被封装成区块并串联成链式的结构。因此，对于一个共识周期而言，"
"需要达成共识的目标就是一个区块。通俗一点来说，验证者在一轮验证的过程中相"
"互交换信息，使得对于区块链上下一个区块的内容达成共识。"

#: ../../enter-the-blockchain.rst:23
msgid ""
"This represents a natural, step-by-step evolution from PoW algorithms. "
"Notice, however, that this rate limits block production to the rate of "
"consensus cycle. Because blocks constitute a packaging of transactions "
"(txn’s for short), this provides a rough estimate of the transaction "
"processing capability of the algorithm. Vitalik’s PoC suggests that this "
"is much, much faster than PoW-based BTC blockchain performance. However, "
"the aim is to get into the range of 40K txns/sec, roughly on par with "
"the transaction rates of financial networks like Visa. To achieve this "
"we make two fundamental observations. The first of these is common "
"sense: most transactions are isolated. The transaction associated with "
"the person buying car parts in Shanghai is separate and isolated from "
"the transaction associated with the person buying coffee in Seattle. "
"Isolation of multiple concurrent transactions follows the same principle "
"as the multi-lane freeway. As long as there’s little to no lane-"
"changing, there’s a much greater throughput on a multi-lane freeway than "
"on a single lane highway. No lane-changing is what we mean by isolation. "
"Following this analogy, we want a block to represent a section of "
"highway with multiple lanes for which there is virtually no lane-"
"changing."
msgstr ""
"在这一章节中，我们将逐步自然地从PoW算法切换到Casper算法上。但是值得注意的"
"是，共识周期的长短直接限制了区块产生的速率。由于交易是被封装在区块当中"
"的，因为我们可以用区块产生的速度大致估量系统处理交易的速率。Vitalik的试验"
"性Casper实现已经说明采用casper算法，区块链的执行效率比采用PoW算法要提高许"
"多。但是Casper算法最终的目的是让交易处理的吞吐量达到4w笔每秒，基本接近于"
"金融网络的处理速率，例如Visa。为了实现如此高的交易处理速率，我们做了两个"
"基本的观察。第一个是一个生活的常识：绝大多数交易都是相互独立的，在上海的"
"一名用户发起一笔交易去购买一辆汽车与在西雅图的一名用户发起一笔交易去购买"
"一杯咖啡是完全独立的。多个并发交易的隔离性需要遵循与多车道高速公路一样的"
"原则，在高速公路上汽车不变道就是我们所说的独立性。按照这个比喻，我们将一"
"个区块比做一条有多条车道的高速公路，期间的汽车几乎没有变道行为。"

#: ../../enter-the-blockchain.rst:26
msgid ""
"The other observation is more subtle. It has to do with programmatic "
"compression. One analogy that might help comes from computer graphics. "
"For many images, such as that of a fern, there are two fundamentally "
"different ways to draw the image. In one of them, a large set of data "
"points corresponding to pixels is provided to the renderer. Presumably, "
"this data set is provided by sampling, such as might be provided by "
"scanning an actual fern. The other way is to recognize that there is an "
"algorithmic pattern associated with ferns that is essentially captured "
"by a fractal. Then the data set of pixels can be represented in a tiny "
"program that generates the fractal image corresponding to the fern. In "
"this sense the program represents a form of compression. Rather than "
"ship the large data set of pixels to the renderer, a relatively small "
"program is shipped instead, and the renderer runs the program to get a "
"stream of pixels it can pull as fast as it can draw."
msgstr ""
"另一个观察是更微观的，它与可编程的数据压缩有关。有一个贴切的比喻来自于计"
"算机图形学。对于许多图像，例如蕨类图像，绘制图像有两种根本不同的方式，其"
"中一种方式是由渲染器提供与像素对应的大量数据点来进行图形绘制。据推测，这"
"个数据集是通过数据采样获得的，例如可能通过扫描实际的蕨类植物获取。另外一"
"种绘制方式是通过获取一个与蕨类植物相关联的算法模型，通过这个算法模型计算"
"产生一系列的像素点来完成图形绘制。从这个角度上来看，这个算法模型其实代表"
"了一种数据的压缩形式。相较于一份数据量很大的像素数据传递给渲染器进行渲"
"染，使用算法模型生成像素数据来绘制图形的效率显然会高很多。"

#: ../../enter-the-blockchain.rst:28
msgid ""
"Collections of transactions can be given similar compression using "
"propositions. The LADL algorithm of Stay and Meredith describes "
"precisely how a proposition corresponds to a collection of transactions. "
"What remains is how to relate different propositions proposed by "
"different validators. Specifically, suppose validator Abed is looking at "
"transactions arising from one portion of the network while validator "
"Troy is looking at transactions arising from another portion of the "
"network. Assuming Abed and Troy are communicating about those groups of "
"transactions using propositions, how do we make sure that the groups of "
"transactions are consistent? This is where propositions as interpreted "
"by the LADL algorithm have significant compression power."
msgstr ""
"因此，我们可以对交易数据采用类似的方式压缩成一个提案。Stay和Meredith的"
"LADL算法精确地描述了如何绑定一个提案与一批交易之间的映射关系，剩下的部分"
"就是如何建立不同验证者与他们提出的提案之间的映射关系。具体来说，假设验证"
"者Abed正在检测网络产生的一部分交易，而验证者Troy正在检测网络产生的另外一"
"部分交易。假设Abed和Troy使用提案来完成这些交易信息的交互，那我们如果保证"
"不同的提案所包含的交易信息是一致的呢？这就是由LADL算法提出的提案具备压缩"
"交易信息的能力。"

#: ../../enter-the-blockchain.rst:30
msgid ""
"By reasoning via the logical level it is possible to determine whether a "
"collection of propositions is consistent. In the case of propositions "
"interpreted by the LADL algorithm they will be consistent if and only if "
"the meaning of their combination (say conjunction) (i.e. the collection "
"they denote) is not empty. When the combination is empty then one or "
"more of the propositions is inconsistent. At this point the validators "
"invoke the Casper betting cycle to pick a winner amongst the maximally "
"consistent subsets of propositions. Once the betting cycle converges, "
"the block that is determined is given in terms of a collection of "
"consistent propositions which then expands out to a much, much larger "
"set of transactions, much the same way that the fern is rendered from "
"the fractal decompression algorithm that produces the pixel set for the "
"image."
msgstr ""
"通过逻辑层次的推理，可以确定一组提案是否一致。在LADL算法中提出，两组提案"
"当且仅当它们的组合（比如并集）（即它们表示的集合）的含义不是空的，则这两"
"组提案是相同的；当他们的组合是空的时候，则表明这两组提案不是一致的。从这"
"个角度来看，验证者在Casper的验证周期中从提案的最大一致性性子集中挑选出一"
"个作为验证区块。一旦共识周期开始收敛，被确定的区块就会以一致的提案集合的"
"形式产生，然后扩展到一个更大的交易集合，就像蕨类植物从由模式算法产生一些"
"列的像素点绘制出图像一样。"

#: ../../enter-the-blockchain.rst:33
msgid "From data storage to block storage in the RChain model"
msgstr "RChain模型中从数据存储到区块存储"

#: ../../enter-the-blockchain.rst:35
msgid ""
"Building on the observations in the section on content storage and query "
"we can detail a direct representation of JSON into a fragment of the "
"rholang syntax referred to in the diagram below as RHOCore."
msgstr ""
"基于对内容存储和查询部分的观察，我们可以将JSON的直接表示形式细化为rholang"
"的相关语法片段（见下图RHOCore部分）。"

#: ../../enter-the-blockchain.rst:42 ../../enter-the-blockchain.rst:52
#: ../../enter-the-blockchain.rst:59
msgid "RSON : RChain data representation"
msgstr "RSON: RChain数据表示形式"

#: ../../enter-the-blockchain.rst:44
msgid ""
"This illustrates a meta-level point about the data storage "
"interpretation. The storage and access semantics is consistent with a "
"self-hosted serialization format, for rendering state to disk or wire. "
"in practical terms, whatever a programmer has rendered to JSON for "
"serialization on the wire or storage in a database like mongodb, can be "
"rendered to an isomorphic expression in a fragment of the rholang "
"syntax; and that expression, if it were executed, would effect the "
"storage. Moreover, the complexity of the format exactly mirrors JSON. "
"However, the spatial types of rholang serve to provide a type directed "
"data validation mechanism for serializing and deserializing the data."
msgstr ""
"这说明了一个关于数据存储的元级别的观点。这种数据格式的存储和访问语义，与"
"自托管的序列化格式是一致的，并用于将状态渲染到磁盘或电线中。实际上，无论"
"编程者将什么内容序列化成JSON并存入像mongodb这样的数据库，它们可以呈现为"
"rholang语法片段中的同构表达式的形式。它的执行将会影响存储。此外，这种格式"
"的复杂度与JSON相差无几。然而，rholang的空间类型为一个类型提供了直接数据验"
"证机制，用于序列化与反序列化数据。"

#: ../../enter-the-blockchain.rst:46
msgid ""
"However, this only uses the output or producer side of the "
"representation. By including the input or consumer side of the "
"representation we can also provide a faithful and efficient "
"representation of block structure. First note the meaning of the input "
"guarded form. The continuation is guaranteed to execute in a context in "
"which the values have been observed at the channels."
msgstr ""
"然而，这仅仅使用了输出端（生产者）。通过包含输入端（消费者），我们也可以"
"提供一个正确、高效的区块结构表示。首先注意输入端的保留格式。这个持续过程"
"被确保是在观测到值的通道上下文中执行的。"

#: ../../enter-the-blockchain.rst:54
msgid ""
"This is precisely a transactional guarantee. From this we can create a "
"faithful interpretation of block structure that corresponds precisely to "
"program syntax."
msgstr ""
"这恰恰是一个交易上的保证。从此，我们可以创建一个恰好与编程语法相关的正确"
"的区块结构表现形式。"

#: ../../enter-the-blockchain.rst:61
msgid "Block representation also embeds directly into RHOCore"
msgstr "区块的表现形式也直接嵌入了RHOCore中。"

#: ../../enter-the-blockchain.rst:64
msgid "Sharding"
msgstr "Sharding（分片）"

#: ../../enter-the-blockchain.rst:66
msgid ""
"Another desideratum in making the Ethereum proposal practical is to "
"ditch the global computer! Instead of a single VM running on the "
"blockchain, what is required is a composition of VMs each serving a "
"shard of client processing. In some sense this marks a return to the "
"original vision of the Internet as conceived when the Rosette/ESS design "
"was proposed. There are some key differences, however. First, the state "
"of each VM is stored on the blockchain. Second, though each VM is cut of "
"the same cloth there is a discipline governing how they interact. "
"Specifically, though they are all effectively copies of the same VM, "
"each is operating on specific virtual address spaces, or namespaces as "
"we have been calling them. When they are operating on the same namespace "
"we have the guarantee that the state across each copy is exactly the "
"same. This is what the consensus algorithm is for."
msgstr ""
"另一个使得以太坊提案得以实践的要求是摆脱全网的电脑设备。以太坊真正需要的"
"是一个虚拟机集群，每个虚拟机服务于一个客户端过程的分片，而不是只在整个区"
"块链上运行单个虚拟机。在某种意义上，这标志着我们重新回到了Rosetee/ESS设计"
"被提出时，互联网最初的愿景。然而这里面有一些关键的不同点。首先，每个虚拟"
"机的状态是被存储在区块链上的。其次，尽管每个虚拟机都是来自同一个部分，但"
"仍然需要一个规则来控制它们的交互。具体来说，尽管它们都是同一个VM的有效副"
"本，每个虚拟机操作特定的虚拟地址空间，或者是我们调用它时所处的命名空间。"
"当它们在操作同一个命名空间时，我们已经确保了每个副本的状态都是强一致的。"
"这是共识算法的目的。"

#: ../../enter-the-blockchain.rst:68
msgid ""
"The use of a compositional account of namespaces to coordinate amongst "
"the VMs is one of the key ingredients missing in Ethereum’s VM design, "
"and the principal reason it is not compositional. The other core change "
"is that the RChain machine design, like the Rosette/ESS design is "
"fundamentally concurrent. Smart contracts in RChain, like actors in "
"Rosette/ESS enjoy fine-grained concurrency during their execution. Two "
"key factors contribute to making this safe for financial transactions."
msgstr ""
"在以太坊的虚拟机设计中，一个很关键的成分缺陷在于虚拟机之间协调某一命名空"
"间下组合账户的使用。而主要的原因是：它并不是组合的。另一个核心变化是，类"
"似Rosette/SEE的设计，RChain的虚拟机被设计成在根本上是并行的。RChain的智能"
"合约，也跟Rosette/ESS中的参与者一样，在执行期享受着细粒度的并行性。以下两"
"个关键因素使得这种并行性在金融交易中很安全。"

#: ../../enter-the-blockchain.rst:71
msgid "Concurrency, non-determinism, and safety"
msgstr "并行性、非确定性与安全性"

#: ../../enter-the-blockchain.rst:73
msgid ""
"The two mechanisms that allow fine-grained concurrent execution to be "
"safe in the distributed setting operate at fundamentally different "
"levels. One is a runtime mechanism and the other is a compile time "
"mechanism. The runtime is easier to understand. The non-determinism "
"arising from concurrent execution associated with a contract always "
"arises as a race of the form:"
msgstr ""
"在分布式环境中，有两种使得细粒度并行执行变得安全的机制，它们根本上是运行"
"在不同层的。一个是在运行期，另一个是在编译期。运行期是比较好理解的。而合"
"约相关的并行执行所引起的不确定性，总是以下面的竞争形式出现："

#: ../../enter-the-blockchain.rst:75
msgid "two outputs racing to serve one input request"
msgstr "两个输出竞争服务于同一个输入请求"

#: ../../enter-the-blockchain.rst:81
msgid "two input requests vying for a single output"
msgstr "两个输入请求竞争同一个输出"

#: ../../enter-the-blockchain.rst:87
msgid ""
"Whether that race arises from computation inside the contract or between "
"the contract and its environment. In either of the two possible race "
"cases, for the contract to make progress one of the reductions will be "
"chosen and that choice is the transaction. That’s the meaning of the "
"transactional boundary described above. Hence, these are the "
"transactions that are replicated by the Casper consensus algorithm. "
"Thus, while there is internal non-determinism, the replicated state is "
"deterministic. All nodes in the same shard see the same state."
msgstr ""
"这种竞争要么出现在合约内部的计算，要么在合约与其运行环境之间。无论是哪一"
"种可能情况，为了让合约能继续运行，我们需要一个消除的手段，其中之一是交"
"易。这就是前文所述的交易边界的意义。因此，这些交易正是Casper共识算法想要"
"复制的。所以，尽管会出现内部的不确定性，但复制的状态是确定性的。在同一个"
"分片上的所有节点都会看到同样的状态。"

#: ../../enter-the-blockchain.rst:89
msgid ""
"This still makes it possible to write unsafe code. Despite the "
"determinism of the EVM, the DAO bug shows up as a kind of unfairness in "
"scheduling state updates relative to servicing new client requests; and, "
"when expressed as a rholang contract, arises as an unwanted race "
"condition. That is, there is a level of non-determinism that was allowed "
"by the contract that wasn’t safe with respect to the intended semantics "
"of the contract. In most practical situations these can be detected and "
"prevented at compile time using the spatial behavioral types of rholang. "
"It is certainly the case in the specific instance of the bug exploited "
"in the attack against the DAO."
msgstr ""
"但我们依然可能写下错误的代码。抛开EVM的确定性不谈，DAO的bug的出现，说明了"
"在调度有关维护新用户请求的状态更新上存在一些不公正；而且，当它以rholang合"
"约的形式表示时，会产生多余的竞争条件。那就是，考虑到合约真正想要表达的语"
"意，合约中所允许的一定程度的不确定性存在着安全隐患。在大多数实际情况下，"
"这些问题可以被检测到，并且在编译期使用rholang的空间行为类型来预防。在攻击"
"DAO所找到的bug的特例中便是如此。"

#: ../../enter-the-blockchain.rst:93
msgid "What is a VM?"
msgstr "虚拟机是什么？"

#: ../../enter-the-blockchain.rst:95
msgid ""
"Let’s take a moment to review what’s in a VM. Every VM corresponds to a "
"table. The table lists a set of transitions. The transitions are of the "
"form::"
msgstr ""
"让我们短暂回顾一下，什么是虚拟机。每个虚拟机相当于一张表格。表格列出了一"
"个交易的集合。这些交易按如下形式："

#: ../../enter-the-blockchain.rst:100
msgid ""
"The transitions specify what happens when a machine in a given state "
"encounters a particular byte code instruction::"
msgstr ""
"交易明确指出了一个在给定状态下的机器运行一串特殊字节码指令后会发生什么："

#: ../../enter-the-blockchain.rst:114
msgid ""
"Examples include loading a literal into a register or popping register "
"values and adding them. Registers, heap, stack, these are examples of "
"components of the machine state. In the case of the RhoVM the most "
"important transition is the one associated with I/O::"
msgstr ""
"上面的例子包含往一个寄存器中加载一个字面量，或是取出寄存器的值并求和。寄"
"存器、堆、栈，这些都是组成机器状态的一些例子。在RhoVM中，最重要的状态转移"
"是关于I/O的："

#: ../../enter-the-blockchain.rst:118
msgid ""
"This transition says that when an input guarded thread in the VM is "
"waiting for input on x is running concurrently with a thread committing "
"and output on x, then the data passes along x, is bound to the variable "
"y in the continuation P. It is important to understand that this is "
"really a higher level transition that may involve many lower level state "
"changes. This is because x may be bound to a wide variety of channels, "
"from tables in local storage, to AMQP queues, to tcp/ip sockets. Each of "
"these has a natural semantics that interoperates smoothly with this "
"higher level transition rule. The interoperation between this high level "
"transition rule and different channel semantics is precisely what the "
"Tuplespace semantics provides."
msgstr ""
"这个转移表达式的意思是，当虚拟机中的一个输入守护线程正在等待x上的输入，与"
"一个正在提交输出到x上的另一个线程并行运行，此时数据会通过x传递，最终在持"
"续过程P中与变量y绑定。这是一个包含了很多低层级状态变化的更高层级的状态转"
"移。理解这个很重要。这是因为x与多种通道绑定，从本地存储的表格，到AMQP队"
"列，再到tcp/ip的套接字。每个通道都有一种与更高层转移规则进行平滑互操作的"
"自然语义。高层转换规则和不同通道语义之间的互操作，恰好是元组空间的语义所"
"能提供的。"

#: ../../enter-the-blockchain.rst:120
msgid ""
"What’s important for this discussion, however, is the recognition that a "
"given VM instance, i.e. a copy of the VM table plus a specific "
"configuration of machine state, can be restricted to operate on a "
"specific collection of names. This collection of names, what we have "
"been calling a namespace, can be programmatically specified and hence "
"not necessarily finite."
msgstr ""
"然而，在这次讨论中，对于给定虚拟机实例的识别是很重要的。换句话说，一个虚"
"拟机表格的副本，加上一个特定的机器状态配置，可以被限制在特定命名集合上进"
"行操作。这个命名集合（也称为命名空间），可以以编程的方式指定，因此也不一"
"定是有限的。"

#: ../../enter-the-blockchain.rst:122
msgid ""
"In this architecture a shard corresponds roughly to a namespace and a "
"machine instance and the RChain nodes on in the network on which the "
"state of this VM is stored. We say ‘roughly’ because shards may be "
"composed of shards, meaning that there are subgroups of the nodes in a "
"given shard that replicate machine state restricted to a subspace of the "
"namespace. Likewise, because VMs can only interoperate if they have "
"overlapping namespaces, multiple shards can be overlaid on the same "
"nodes. This provides both availability and security features because "
"using these facts about the relationships of VM, nodes, and namespaces, "
"finding a correlation between physical locations of nodes and namespaces "
"can be made as computationally hard as desired."
msgstr ""
"在这个架构中，一个分片大致相当于一个命名空间，一个机器实例以及部署在虚拟"
"机状态所存储的网络上的RChain节点。我们只敢说“大致”，因为分片也可能由分片"
"组成，这意味着给定的、在命名空间的子空间中复制机器状态的分片中，存在着节"
"点的子群。同样地，因为虚拟机只有在他们有重合的命名空间时才可以互操作，多"
"个分片可以存储在相同的节点上。这提供了可用性与安全性，因为对于使用虚拟"
"机、节点和命名空间之间的关系，以及寻找节点的物理地址与命名空间的相关性，"
"这些可以根据需要在计算量上做得足够困难。"
